@inherits LayoutComponentBase

@attribute [Authorize(Roles = "Student,Gym,Trainer")]

<div id="preloader">
    <div class="sk-three-bounce">
        <div class="sk-child sk-bounce1"></div>
        <div class="sk-child sk-bounce2"></div>
        <div class="sk-child sk-bounce3"></div>
    </div>
</div>

<AuthorizeView Policy="FilledSurveyForm">
    <Authorized>
        @{
            _cssClass = string.Empty;
        }
    </Authorized>
    <NotAuthorized>
        @{
            _cssClass = "menu-toggle";
        }
    </NotAuthorized>
</AuthorizeView>
<div id="main-wrapper" class="@_cssClass">
    <NavHeader />
    <ChatBox />
    @*<CascadingValue Value="@(_message)">
            <Header></Header>
        </CascadingValue>*@
    <Header />
    <NavMenu />
    <div class="content-body">
        @Body
    </div>
    <Footer />
</div>

@code{

    private string _cssClass = string.Empty;
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    //string _message;

    //private void SetHeading(string heading)
    //{
    //    _message = heading;
    //    StateHasChanged();
    //}

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (user.User.Claims.Any(x => x.Type.Equals("FilledSurveyForm")))
        {
            _cssClass = string.Empty;
        }
        else
        {
            _cssClass = "menu-toggle";
        }
        //_message = NavigationManager.Uri.Split(Constant.AppUrl)[1];
        //if (_message.Contains("-"))
        //{
        //    _message = _message.Split('-')[0];
        //}
        //_message = _message.Replace('/', ' ');
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await JSRuntime.InvokeVoidAsync("import", "/JavaScript.js");
        await JSRuntime.InvokeVoidAsync("window.Custom2");
        await JSRuntime.InvokeVoidAsync("window.Custom3");
        await JSRuntime.InvokeVoidAsync("window.DevNav");
        //await JSRuntime.InvokeVoidAsync("window.carousel");
        await JSRuntime.InvokeVoidAsync("window.LoadChart");
        await JSRuntime.InvokeVoidAsync("window.Dashboard1");
        await JSRuntime.InvokeVoidAsync("carouselReview");
        //await JSRuntime.InvokeVoidAsync("import", "/Jobie/vendor/global/global.min.js");
        //await JSRuntime.InvokeVoidAsync("import", "/Jobie/vendor/bootstrap-select/dist/js/bootstrap-select.min.js");
        //await JSRuntime.InvokeVoidAsync("import", "/Jobie/vendor/chart.js/Chart.bundle.min.js");
        //await JSRuntime.InvokeVoidAsync("Athlete/js/parallax/jquery.transform2d.js");
    }
}
